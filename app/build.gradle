apply plugin: 'com.android.application'

Properties props = new Properties()
try {
    props.load(file('twitter.properties').newDataInputStream())
} catch (Exception ex) {
    throw new FileNotFoundException("Missing twitter.properties, check the twitter.sample.properties file.");
}

android {
    compileSdkVersion 28
//    build 실패시
//    lintOptions {
//        abortOnError false
//    }
//    signingConfigs {
//        release{
//            storeFile file("release.keystore")
//            storePassword "xxxxxxx"
//            keyAlias "androidreleasekey"
//            keyPassword "xxxxxxxx"
//        }
//    }
    defaultConfig {
        applicationId "com.enos.totalsns"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        debug {
            buildConfigField "String", "CONSUMER_KEY", "\"${props.getProperty("twitterConsumerKey")}\""
            buildConfigField "String", "CONSUMER_SECRET", "\"${props.getProperty("twitterConsumerSecret")}\""
        }
        release {
            buildConfigField "String", "CONSUMER_KEY", "\"${props.getProperty("twitterConsumerKey")}\""
            buildConfigField "String", "CONSUMER_SECRET", "\"${props.getProperty("twitterConsumerSecret")}\""
            minifyEnabled false //프로가드 비활성
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'org.twitter4j:twitter4j-core:4.0.7'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:palette-v7:28.0.0'
    implementation 'com.android.support:support-vector-drawable:28.0.0'
    implementation 'android.arch.lifecycle:extensions:1.1.1'

    implementation 'com.android.support:preference-v7:28.0.0'

    //google map 관련 라이브러리 FusedLocationProviderClient
    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    // fused location
    implementation "com.google.android.gms:play-services-location:16.0.0"
    // calculate zoom level
    implementation 'com.google.maps.android:android-maps-utils:0.4.4'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //레트로핏 라이브러리 추가
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    def lifecycle_version = "1.1.1"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
//    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version"

    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    //    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"

    //lambda
    implementation 'me.tatarka:gradle-retrolambda:3.7.0'

    // glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'

    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    annotationProcessor "android.arch.persistence.room:compiler:$room_version"

    def work_version = "1.0.0-beta01"

    implementation "android.arch.work:work-runtime:$work_version" // use -ktx for Kotlin+Coroutines

    // optional - RxJava2 support
//    implementation "android.arch.work:work-rxjava2:$work_version"

    // optional - Test helpers
    androidTestImplementation "android.arch.work:work-testing:$work_version"

    def paging_version = "1.0.1"

    implementation "android.arch.paging:runtime:$paging_version"

    // alternatively - without Android dependencies for testing
//    testImplementation "android.arch.paging:common:$paging_version"

    // optional - RxJava support
//    implementation "android.arch.paging:rxjava2:$paging_version"

    // optional - RxJava support for Room
//    implementation "android.arch.persistence.room:rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    //    implementation "android.arch.persistence.room:guava:$room_version"
    // Test helpers
//    testImplementation "android.arch.persistence.room:testing:$room_version"

    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
//    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    // rxandroid2
//    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
//    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'

    //dagger
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'
//    annotationProcessor 'com.google.dagger:dagger-android-processor:2.15'
//    annotationProcessor 'com.google.dagger:dagger-compiler:2.15'

    // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.15'
    implementation 'io.realm:android-adapters:2.0.0'

    //swipe refresh bottom top
    implementation 'com.github.omadahealth:swipy:1.2.3@aar'

    // animated searchview
    implementation 'com.github.Ferfalk:SimpleSearchView:0.1.3'

    //speed dial
    implementation 'com.github.leinardi:FloatingActionButtonSpeedDial:master-SNAPSHOT'
}
